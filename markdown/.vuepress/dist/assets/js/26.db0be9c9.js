(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{146:function(e,t,s){"use strict";s.r(t);var r=s(1),o=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("p",[e._v("You are handed a Back To The Future 2 style book. Instead of the almanac\nthough, its tomorrows stock results. For this exercise we are going to\nwork out a way to figure out how to maximize our returns on the\nfollowing")]),e._v(" "),s("p",[e._v("// Starting Code")]),e._v(" "),s("p",[e._v("stockPricesYesterday = [10, 7, 5, 8, 11, 9]")]),e._v(" "),s("p",[e._v("getMaxProfit(stockPricesYesterday)")]),e._v(" "),s("p",[e._v("The first version of this code could be something super simple like:")]),e._v(" "),s("p",[e._v("// works here...")]),e._v(" "),s("p",[e._v("var getMaxProfit = function(stockPricesYesterday){")]),e._v(" "),s("p",[e._v("return Math.max(...stockPricesYesterday) -\nMath.min(...stockPricesYesterday)")]),e._v(" "),s("p",[e._v("}")]),e._v(" "),s("p",[e._v("var stockPricesYesterday = [10, 7, 5, 8, 11, 9];")]),e._v(" "),s("p",[e._v("getMaxProfit(stockPricesYesterday)")]),e._v(" "),s("p",[e._v("This of course doesn't solve the problem every time, but it does\nintroduce a cool tool we have, the spread operator. The spread operator\n... is a way to expand an array or object and pass in each part as a\nseparate item. Our getMaxProfit function is pretty easy to understand,\nit takes the largest number of the day, and subtracts the smallest\nnumber from it. In out next example we will be address what to do if the\nlargest number comes BEFORE the smallest number, and there for making it\nimpossible to sell at the highest price, or buy at the lowest.")])])}],!1,null,null,null);t.default=o.exports}}]);