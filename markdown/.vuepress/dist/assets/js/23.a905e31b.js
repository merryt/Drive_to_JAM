(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{132:function(e,t,n){"use strict";n.r(t);var s=n(1),i=Object(s.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("p",[e._v("I am helping a friend with a business he is starting. One thing he wants\nis the ability to test a network health remotely and regularly from an\nendpoint, not just using the network providers tools.")]),e._v(" "),n("p",[e._v("Step one of this project was writing a server where we could store all\nthis information. I might break down that project, step by step, but for\nnow, you can see it\n"),n("a",{attrs:{href:"https://github.com/connectivtech/dataserver",target:"_blank",rel:"noopener noreferrer"}},[e._v("[here]{.underline}"),n("OutboundLink")],1),e._v(". This\nis my first Django project so if you have feedback or advice please\nreach out.")]),e._v(" "),n("p",[e._v("Step 2, and what I will be covering in this article is building the\nsoftware that goes on a Raspberry Pi to ping the network and send that\nping to the server.")]),e._v(" "),n("p",[e._v("The first thing we want to do is create a little script we will attach\nto a cron job. We start with the shebang, or the hashbang. I read this\nis important so the bash knows what interpreter to use... I just know\nif I don't have this, things fall apart.")]),e._v(" "),n("p",[e._v("#! /usr/bin/env python")]),e._v(" "),n("p",[e._v("next, we need to give the file the ability to run from the terminal.")]),e._v(" "),n("p",[e._v("So I set the permission as chmod +x to make it executable. From here we\nget to actually write our code!")]),e._v(" "),n("p",[e._v("First thing I want to do is ping the server, for this I will use the\ntool subprocess. this will allow us to type a console command are return\nthe results.")]),e._v(" "),n("p",[e._v("Check Ping")]),e._v(" "),n("p",[e._v("import os")]),e._v(" "),n("p",[e._v("import subprocess")]),e._v(" "),n("p",[e._v('hostname = "google.com"')]),e._v(" "),n("p",[e._v("numberof_pings = 10")]),e._v(" "),n("p",[e._v('pings = subprocess.Popen(["ping","-c " + str(numberof_pings),\nhostname], stdout = subprocess.PIPE)')]),e._v(" "),n("p",[e._v("ping_results = pings.communicate()[0]")]),e._v(" "),n("p",[e._v('cutpoint = ping_results.find("min/avg/max/stddev =")')]),e._v(" "),n("p",[e._v("minPing = ping_results[(cutpoint + 21):(cutpoint + 27)]")]),e._v(" "),n("p",[e._v("averagePing = ping_results[(cutpoint + 28):(cutpoint + 34)]")]),e._v(" "),n("p",[e._v("maxPing = ping_results[(cutpoint + 35):(cutpoint + 41)]")]),e._v(" "),n("p",[e._v("the subprocess.popen returns our results, but most important to us is\nthe final line round-trip min/avg/max/stddev =\n38.642/39.471/40.585/0.471 ms")]),e._v(" "),n("p",[e._v("Once we have that we slice it up to have our min, average and max ping.\nI realized I need to switch stddev to mdev, and adjust my counts\ndepending on how ping returns. Differences in osx vs ubuntu I guess.")]),e._v(" "),n("p",[e._v("After we have our ping the next item I wanted to capture was my internal\nand external IP addresses. Internal is what the network has assigned to\nme, external is what the ISP is assigning to me.")]),e._v(" "),n("p",[e._v("Internal IP:")]),e._v(" "),n("p",[e._v('ifconfig = subprocess.Popen("ifconfig |grep inet", stdout =\nsubprocess.PIPE, shell=True)')]),e._v(" "),n("p",[e._v("ifconfig_results = ifconfig.communicate()[0]")]),e._v(" "),n("p",[e._v('ifconfig_cutpoint = ifconfig_results.find("inet ", 10)')]),e._v(" "),n("p",[e._v("internal_ip =\nifconfig_results[(ifconfig_cutpoint+5):(ifconfig_cutpoint + 17)]")]),e._v(" "),n("p",[e._v("External IP:")]),e._v(" "),n("p",[e._v('external_ip = subprocess.Popen("dig +short myip.opendns.com\n@resolver1.opendns.com", stdout = subprocess.PIPE, shell=True)')]),e._v(" "),n("p",[e._v("external_ip = external_ip.communicate()[0][0:-1]")]),e._v(" "),n("p",[e._v("For these, we use a very similar process to what we did for our ping. We\nuse some handy command line tools, take the result, pull the data we\nwant out of the string and store it.")]),e._v(" "),n("p",[e._v("Next thing we need is our time formatted in a way the server wants it. I\nused a one liner for this time =\nstr(datetime.datetime.now().strftime('%Y-%m-%d')) + \"T\" +\nstr(datetime.datetime.now().time().strftime('%H:%M:%S')) We also need\nto make sure we include datetime. import datetime")]),e._v(" "),n("p",[e._v("Next, I want to do a speed test. For that I used\n"),n("a",{attrs:{href:"https://github.com/sivel/speedtest-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("[https://github.com/sivel/speedtest-cli]{.underline}"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("Speedtest")]),e._v(" "),n("p",[e._v("import speedtest")]),e._v(" "),n("p",[e._v("servers = []")]),e._v(" "),n("p",[e._v("s = speedtest.Speedtest()")]),e._v(" "),n("p",[e._v("s.get_servers(servers)")]),e._v(" "),n("p",[e._v("s.get_best_server()")]),e._v(" "),n("p",[e._v("downspeed = s.download()")]),e._v(" "),n("p",[e._v("upspeed = s.upload()")]),e._v(" "),n("p",[e._v("This is nearly 1:1 copy from their documentation. It gets the best\nserver in the area, and tests up and down speeds from it, then stores\nthem as variables.")]),e._v(" "),n("p",[e._v("The final step to this process is sending it to a server. For this we\nwill use the package, requests The code looks like:")]),e._v(" "),n("p",[e._v("Sending Data to server")]),e._v(" "),n("p",[e._v("import requests")]),e._v(" "),n("p",[e._v("payload = {'node_name':\n\"http://138.197.216.233:8000/networkconnectivity/networkNodes/536e575d-5e4c-4ddd-b61b-187d072c5aa0/\",")]),e._v(" "),n("p",[e._v("'ip_address': internal_ip,")]),e._v(" "),n("p",[e._v("'external_ip': external_ip,")]),e._v(" "),n("p",[e._v("'timestamp': time,")]),e._v(" "),n("p",[e._v("'ping': averagePing,")]),e._v(" "),n("p",[e._v("'ping_destination':hostname,")]),e._v(" "),n("p",[e._v("'downspeed': downspeed ,")]),e._v(" "),n("p",[e._v("'upspeed': upspeed")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("r =\nrequests.post('http://138.197.216.233:8000/networkconnectivity/networkData/',\nauth=('admin', 'testpw'), data=payload)")]),e._v(" "),n("p",[e._v("The first section of this is defining our payload. The node_name is\ngiven to us by the server so it knows which node/pi we are associating\nthese pings to. then we are just linking up all our previous data and\nbuilding out the data structure for them.")]),e._v(" "),n("p",[e._v("After that, we are posting all this information to our server with some\nsimple authentication.")]),e._v(" "),n("p",[e._v("Now that we have this simple script written we need to move it over to\nthe PI and text it out. I moved the file to /etc/cron.hourly/.")]),e._v(" "),n("p",[e._v("The first thing we do on the pi is install all of our dependencies.\n(Dig, Requests, and speedtest). Once it tests correctly for running it\nas a one off its time to hook it up to a cron job. I used the command\ncrontab -e this will open your personal crontab. Inside of this file I\nused the command */15 * * * * /usr/bin/python\n/etc/cron.hourly/networknodejob.py to make the tab run every 15 minutes.")]),e._v(" "),n("p",[e._v("And just like that we should be good to go! If you have any questions or\nadvice please reach out! Here is my finished code:\n[https://github.com/connectivtech/networkbot]{.underline}")])])},[],!1,null,null,null);t.default=i.exports}}]);